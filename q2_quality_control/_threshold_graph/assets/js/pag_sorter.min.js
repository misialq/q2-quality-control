function init_pag_sortable_table(index) {
        let arr_sub_id = parseInt(document.getElementById(`script_subset_id_${index}`).dataset.rowsPerPage);
        let subset_table_id = `seq_table_${index}`;
        let subset_table_body_id = `table_body_${index}`;
        let prev_button_id = `prev_page_${index}`;
        let next_button_id = `next_page_${index}`;
        let page_info_id = `page_info_${index}`;

        let table = document.getElementById(subset_table_id);
        let table_body = document.getElementById(subset_table_body_id);
        let prev_button = document.getElementById(prev_button_id);
        let next_button = document.getElementById(next_button_id);
        let page_info = document.getElementById(page_info_id);

        if (!table || !table_body) return;

        let rows = Array.from(table_body.querySelectorAll("tr"));
        if (rows.length === 0) return;

        let rowsPerPage;
        if (arr_sub_id > 1) {
            rowsPerPage = rows.length > 10 ? 10 : rows.length;
        } else {
            rowsPerPage = rows.length;
        }

        let curr_page = 1;
        let sort_col = null;
        let sort_ascend = true;

        function showPage(page) {
            let start = (page - 1) * rowsPerPage;
            let end = start + rowsPerPage;

            table_body.innerHTML = "";
            rows.slice(start, end).forEach(row => table_body.appendChild(row));

            if (page_info) {
                page_info.innerText = `${start + 1} - ${Math.min(end, rows.length)}`;
            }
            if (prev_button) prev_button.disabled = (page === 1);
            if (next_button) next_button.disabled = (end >= rows.length);
        }

        function sortTable(columnIndex, headerElement) {
            if (sort_col === columnIndex) {
                sort_ascend = !sort_ascend;
            } else {
                sort_col = columnIndex;
                sort_ascend = true;
            }

            rows.sort((row_one, row_two) => {
                let val_one = row_one.cells[columnIndex].innerText.trim();
                let val_two = row_two.cells[columnIndex].innerText.trim();

                let num_one = parseFloat(val_one);
                let num_two = parseFloat(val_two);

                if (val_one === "nan") num_one = -Infinity;
                if (val_two === "nan") num_two = -Infinity;

                let compar;
                if (!isNaN(num_one) && !isNaN(num_two)) {
                    compar = num_one - num_two;
                } else {
                    compar = val_one.localeCompare(val_two);
                }

                return sort_ascend ? compar : -compar;
            });

            curr_page = 1;
            showPage(curr_page);

            document.querySelectorAll(`#${subset_table_id} .sort-indicator`).forEach(span => span.innerText = "");
            let indicator = headerElement.querySelector(".sort-indicator");
            if (indicator) {
                indicator.innerText = sort_ascend ? "▲" : "▼";
            }
        }

        document.querySelectorAll(`#${subset_table_id} .sortable`).forEach((header, index) => {
            header.style.cursor = "pointer";
            header.addEventListener("click", function () {
                sortTable(index, this);
            });
        });

        if (prev_button) {
            prev_button.addEventListener("click", function () {
                if (curr_page > 1) {
                    curr_page--;
                    showPage(curr_page);
                }
            });
        }

        if (next_button) {
            next_button.addEventListener("click", function () {
                if (curr_page * rowsPerPage < rows.length) {
                    curr_page++;
                    showPage(curr_page);
                }
            });
        }

        showPage(curr_page);
}
